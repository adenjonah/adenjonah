# Overview
# This GitHub Actions workflow automates the process of updating a README file 
# with the most active repositories in the past 30 days.

# 1. Triggering Events:
#    - Scheduled to run daily at midnight.
#    - Manually triggered in Actions.
#    - Triggered on updates to workflow files in the repository.

# 2. Workflow Steps:
#    - Checkout adenjonah/adenjonah Repository: Clones the repository to the runner.
#    - Load Replacement Links for repos where I want to link a production site rather than the repo:
#      - Reads and validates a JSON file for display name and link replacements for repositories.
#      - Sets the environment variable `REPLACEMENT_LINKS` which protects from the private repos being seen.
#    - Fetch Commit and PR Data:
#      - Fetches repositories using the GitHub API.
#      - Filters out ignored repositories from a provided list.
#      - Retrieves recent commits and pull requests for each repository to assess activity.
#      - Identifies the top three repositories based on activity and saves their names to a file.
#    - Generate README Content:
#      - Builds a section with links to the top repositories, using replacement links if specified.
#      - Generates an updated README section with HTML links to repositories.
#    - Check for Changes:
#      - Compares the newly generated README section with the existing one to detect updates.
#    - Commit and Push Changes:
#      - If changes are detected, updates the README file, commits the changes, and pushes them to the repository.

name: Update README

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    paths:
      - .github/workflows/update-readme.yml
      - .github/config/replacement_links.json
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load Replacement Links
        id: load-replacement-links
        run: |
          if [ -f .github/config/replacement_links.json ]; then
            if ! jq empty .github/config/replacement_links.json; then
              echo "Invalid JSON format in replacement_links.json"
              exit 1
            fi
            REPLACEMENT_LINKS=$(jq -c . .github/config/replacement_links.json)
            echo "REPLACEMENT_LINKS=$REPLACEMENT_LINKS" >> $GITHUB_ENV
          else
            echo "No replacement_links.json found. Using empty object."
            echo "REPLACEMENT_LINKS={}" >> $GITHUB_ENV
          fi

      - name: Fetch Commit and PR Data
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          IGNORE_LIST: ${{ secrets.IGNORE_LIST }}
          REPLACEMENT_LINKS: ${{ env.REPLACEMENT_LINKS }}
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "GH_TOKEN not set. Cannot fetch repository data."
            exit 1
          fi

          if [ -z "$IGNORE_LIST" ]; then
            echo "IGNORE_LIST is empty or not set. Proceeding without ignoring any repos."
            ignore_list=()
          else
            IFS=',' read -r -a ignore_list <<< "$IGNORE_LIST"
          fi

          echo "Fetching repositories..."
          repos=$(curl -s -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/user/repos?per_page=100)

          if [ -z "$repos" ] || [ "$repos" = "[]" ]; then
            echo "No repositories returned or empty response. Skipping update."
            exit 0
          fi

          parsed_repos=$(echo "$repos" | jq -r '.[] | .full_name' 2>/dev/null)

          filtered_repos=()
          for repo in $parsed_repos; do
            if [[ ! " ${ignore_list[@]} " =~ " $repo " ]]; then
              filtered_repos+=("$repo")
            fi
          done

          if [ ${#filtered_repos[@]} -eq 0 ]; then
            echo "No repositories left after filtering. Skipping update."
            exit 0
          fi

          top_repos=""
          for repo in "${filtered_repos[@]}"; do
            commits=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/$repo/commits?since=$(date -d '30 days ago' +%Y-%m-%d)" | jq length)

            prs=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/$repo/pulls?state=all&per_page=100" \
              | jq '[.[] | select(.created_at >= "'$(date -d '30 days ago' +%Y-%m-%d)'")] | length')

            if [[ $commits -gt 0 || $prs -gt 0 ]]; then
              echo "$commits $prs $repo"
            fi
          done | sort -k1,2nr | head -n 3 | awk '{print $3}' > top_repos.txt

          if [ ! -s top_repos.txt ]; then
            echo "No top repositories found with activity. Skipping update."
            exit 0
          fi

          top_repos=$(paste -sd, top_repos.txt)
          echo "top_repos=$top_repos" >> $GITHUB_ENV

      - name: Generate README Content
        id: generate-readme
        env:
          REPLACEMENT_LINKS: ${{ env.REPLACEMENT_LINKS }}
        run: |
          top_repos=$(echo "${{ env.top_repos }}" | tr ',' '\n')
          if [[ -z "$top_repos" ]]; then
            echo "No repositories with activity. Skipping update."
            exit 0
          fi

          repos_links=""
          while IFS= read -r repo; do
            repo_name=$(basename "$repo")
            if jq -e --arg repo_name "$repo_name" '.[$repo_name]' <<< "$REPLACEMENT_LINKS" > /dev/null; then
              display_name=$(jq -r --arg repo_name "$repo_name" '.[$repo_name].display_name' <<< "$REPLACEMENT_LINKS")
              link=$(jq -r --arg repo_name "$repo_name" '.[$repo_name].link' <<< "$REPLACEMENT_LINKS")
              repos_links="$repos_links, <a href=\"$link\" target=\"_blank\"><b>$display_name</b></a>"
            else
              repos_links="$repos_links, <a href=\"https://github.com/$repo\" target=\"_blank\"><b>$repo_name</b></a>"
            fi
          done <<< "$top_repos"

          repos_links="${repos_links:2}"
          echo "- ðŸ”­ Iâ€™m currently working on $repos_links (Updated automatically, checkout the code <a href=\"https://github.com/adenjonah/adenjonah/blob/main/.github/workflows/update-readme.yml\" target=\"_blank\"><b>here</b></a>)" > new_readme_section.txt

      - name: Check for Changes
        id: check-changes
        run: |
          sed -n '/- ðŸ”­ Iâ€™m currently working on/p' README.md > current_readme_section.txt

          if ! diff current_readme_section.txt new_readme_section.txt > /dev/null; then
            echo "Changes detected."
            echo "SHOULD_COMMIT=true" >> $GITHUB_ENV
          else
            echo "No changes detected."
            echo "SHOULD_COMMIT=false" >> $GITHUB_ENV
          fi

      - name: Commit and Push Changes
        if: env.SHOULD_COMMIT == 'true'
        run: |
          sed -i "/- ðŸ”­ Iâ€™m currently working on/c$(cat new_readme_section.txt)" README.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Update README with new top repositories"
          git push
